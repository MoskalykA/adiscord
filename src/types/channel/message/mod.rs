pub mod activity;
pub mod component;
pub mod flags;
pub mod interaction;
pub mod reference;
pub mod role_subscription_data;
pub mod r#type;

use self::{
    activity::MessageActivity, component::MessageComponent, flags::MessageFlags,
    interaction::MessageInteraction, r#type::MessageType, reference::MessageReference,
    role_subscription_data::RoleSubscriptionData,
};
use super::{attachment::Attachment, embed::Embed, mention::Mention, reaction::Reaction, Channel};
use crate::types::{
    application::Application,
    role::Role,
    sticker::{item::StickerItem, Sticker},
    user::User,
};
use serde::Deserialize;

#[derive(Deserialize, Debug)]
#[serde(untagged)]
pub enum Nonce {
    Integer(u64),
    String(String),
}

#[derive(Deserialize, Debug)]
pub struct Message {
    /// id of the message
    pub id: String,

    /// id of the channel the message was sent in
    pub channel_id: String,

    /// the author of this message (not guaranteed to be a valid user, see below)
    pub author: User,

    /// contents of the message
    pub content: String,

    /// when this message was sent
    pub timestamp: String,

    /// when this message was edited (or null if never)
    pub edited_timestamp: Option<String>,

    /// whether this was a TTS message
    pub tts: bool,

    /// whether this message mentions everyone
    pub mention_everyone: bool,

    /// users specifically mentioned in the message
    pub mentions: Vec<User>,

    /// roles specifically mentioned in this message
    pub mention_roles: Vec<Role>,

    /// channels specifically mentioned in this message
    pub mention_channels: Option<Vec<Mention>>,

    /// any attached files
    pub attachments: Vec<Attachment>,

    /// any embedded content
    pub embeds: Vec<Embed>,

    /// reactions to the message
    pub reactions: Option<Vec<Reaction>>,

    /// used for validating a message was sent
    pub nonce: Option<Nonce>,

    /// whether this message is pinned
    pub pinned: bool,

    /// if the message is generated by a webhook, this is the webhook's id
    pub webhook_id: Option<String>,

    /// type of message
    pub r#type: MessageType,

    /// sent with Rich Presence-related chat embeds
    pub activity: Option<MessageActivity>,

    /// sent with Rich Presence-related chat embeds
    pub application: Option<Application>,

    /// if the message is an Interaction or application-owned webhook, this is the id of the application    
    pub application_id: Option<String>,

    /// data showing the source of a crosspost, channel follow add, pin, or reply message
    pub message_reference: Option<MessageReference>,

    /// message flags combined as a bitfield
    pub flags: Option<MessageFlags>,

    /// the message associated with the message_reference
    pub referenced_message: Option<Box<Message>>,

    /// sent if the message is a response to an Interaction
    pub interaction: Option<MessageInteraction>,

    /// the thread that was started from this message, includes thread member object
    pub thread: Option<Channel>,

    /// sent if the message contains components like buttons, action rows, or other interactive components
    pub components: Option<Vec<MessageComponent>>,

    /// sent if the message contains stickers
    pub sticker_items: Option<Vec<StickerItem>>,

    #[deprecated]
    /// the stickers sent with the message
    pub stickers: Option<Vec<Sticker>>,

    /// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
    pub position: Option<u32>,

    /// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
    pub role_subscription_data: Option<RoleSubscriptionData>,
}
